/*
 * This file was generated by the Gradle "init" task.
 */

plugins {
    id "io.franzbecker.gradle-lombok" version "3.2.0"
    id "java"
    id "maven-publish"
    id "signing"
    id "com.github.ben-manes.versions" version "0.27.0"
    id "com.github.hierynomus.license" version "0.15.0"
}

group = "de.alpharogroup"
version = "7.1.1"
description = "mystic-crypt"
sourceCompatibility = "1.8"

ext {
    lombokVersion = "1.18.10"
    randomBeansVersion = "3.9.0"
    meanbeanVersion = "2.0.3"
    testngVersion = "7.0.0"
    junitVersion = "4.12"
    mockitoCoreVersion = "3.1.0"
    cryptApiVersion = "7.2"
    cryptDataVersion = "7.2"
    modelCoreVersion = "1.6.2"
    fileWorkerVersion = "5.2"
    jcommonsLangVersion = "5.2.2"
    testObjectsVersion = "5.2"
    sillyCollectionsVersion = "5.4"
    xmlExtensionsVersion = "6.2.1"
    jobjCoreVersion = "3.3"
    jobjContractVerifierVersion = "3.2"
    jobjectCloneVersion = "3.1.2"
    randomizerVersion = "6.3"
    commonsCodecVersion = "1.13"
    bouncycastleVersion = "1.64"
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compile "commons-codec:commons-codec:${commonsCodecVersion}"
    compile "de.alpharogroup:crypt-api:${cryptApiVersion}"
    compile "de.alpharogroup:crypt-data:${cryptDataVersion}"
    compile "de.alpharogroup:randomizer-core:${randomizerVersion}"
    compile "de.alpharogroup:file-worker:${fileWorkerVersion}"
    compile "de.alpharogroup:model-core:${modelCoreVersion}"
    compile "de.alpharogroup:xml-extensions:${xmlExtensionsVersion}"
    compile "de.alpharogroup:silly-collections:${sillyCollectionsVersion}"
    compile "de.alpharogroup:jobject-clone:${jobjectCloneVersion}"
    compile "de.alpharogroup:jobj-core:${jobjCoreVersion}"
    compile "org.bouncycastle:bcprov-jdk15on:${bouncycastleVersion}"
    compile "org.bouncycastle:bcprov-ext-jdk15on:${bouncycastleVersion}"
    compile "org.bouncycastle:bcpkix-jdk15on:${bouncycastleVersion}"
    testCompile "de.alpharogroup:test-objects:${testObjectsVersion}"
    testCompile "de.alpharogroup:jcommons-lang:${jcommonsLangVersion}"
    testCompile "de.alpharogroup:jobj-contract-verifier:${jobjContractVerifierVersion}"
    testCompile "io.github.benas:random-beans:${randomBeansVersion}"
    testCompile "org.meanbean:meanbean:${meanbeanVersion}"
    testCompile "org.testng:testng:${testngVersion}"
    testCompile "junit:junit:${junitVersion}"
    testCompile "org.mockito:mockito-core:${mockitoCoreVersion}"
}

license {
    ext.year="2015"
    ext.owner="Asterios Raptis"
    header rootProject.file('src/main/resources/LICENSE.txt')
    excludes(["**/README",
              "**/README.md",
              "**/LICENSE",
              "**/NOTICE",
              "**/*.xml",
              "**/*.xsl",
              "**/*.xsd",
              "**/*.dtd",
              "**/*.html",
              "**/*.jsp",
              "**/*.jpa",
              "**/*.sql",
              "**/*.properties",
              "**/*.bat",
              "**/*.gradle",
              "**/*.MF",
              "**/*.txt",
              "**/*.vm",
              "**/*.log",
              "**/*.map",
              "**/*.js.map",
              "**/*.tmpl",
              "**/*.js.tmpl",
              "**/*.editorconfig",
              "**/*.lombok.config",
              "src/test/resources/**",
              "src/main/resources/**"])
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from(sourceSets.main.allJava)
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set("javadoc")
//    archiveClassifier = "javadoc"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "mystic-crypt"
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = '${project.artifactId}'
                description = 'The target of this project is to make encryption and decryption as simple as possible.'
                url = 'https://github.com/astrapi69/${project.artifactId}'
                licenses {
                    license {
                        name = "MIT License"
                        url = "http://www.opensource.org/licenses/mit-license.php"
                    }
                }
                developers {
                    developer {
                        id = "astrapi69"
                        name = "Asterios Raptis"
                    }
                }
                scm {
                    connection = 'scm:git:git:@github.com:astrapi69/${project.artifactId}.git'
                    developerConnection = 'scm:git:git@github.com:astrapi69/${project.artifactId}.git'
                    url = 'git:@github.com:astrapi69/${project.artifactId}.git'
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username project.property("ossrhUsername")
                password project.property("ossrhPassword")
            }
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

test {
    useTestNG()
}
