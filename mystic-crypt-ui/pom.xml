<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>de.alpharogroup</groupId>
		<artifactId>mvn-ui-parent</artifactId>
		<version>1.8.0-SNAPSHOT</version>
		<relativePath></relativePath>
	</parent>

	<artifactId>mystic-crypt-ui</artifactId>
	<version>4.20.0-SNAPSHOT</version>

	<properties>
		<miglayout-swing.version>5.0</miglayout-swing.version>
		<mystic-crypt.version>4.20.0-SNAPSHOT</mystic-crypt.version>
		<full-app-name>mystic-crypt-ui</full-app-name>
		<info.appName>mystic-crypt-ui</info.appName>
		<file-name-with-dependencies>${full-app-name}-jar-with-dependencies.jar</file-name-with-dependencies>
		<file-name-with-dependencies-path>${project.build.directory}/${file-name-with-dependencies}</file-name-with-dependencies-path>
		<dist-path>${basedir}/dist/bin</dist-path>
		<dist-target-file-name-path>${dist-path}/${full-app-name}.jar</dist-target-file-name-path>
	</properties>

	<dependencyManagement>

		<dependencies>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>crypt-data</artifactId>
				<version>${mystic-crypt.version}</version>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>crypt-core</artifactId>
				<version>${mystic-crypt.version}</version>
			</dependency>

			<dependency>
				<groupId>com.miglayout</groupId>
				<artifactId>miglayout-swing</artifactId>
				<version>${miglayout-swing.version}</version>
			</dependency>

		</dependencies>

	</dependencyManagement>

	<dependencies>

		<dependency>
			<groupId>javax.help</groupId>
			<artifactId>javahelp</artifactId>
		</dependency>

		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
		</dependency>

		<dependency>
			<groupId>org.swinglabs</groupId>
			<artifactId>swing-layout</artifactId>
		</dependency>

		<dependency>
			<groupId>org.swinglabs</groupId>
			<artifactId>jxlayer</artifactId>
		</dependency>

		<dependency>
			<groupId>org.swinglabs</groupId>
			<artifactId>swing-worker</artifactId>
		</dependency>

		<dependency>
			<groupId>de.alpharogroup</groupId>
			<artifactId>swing-components</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring</artifactId>
		</dependency>

		<dependency>
			<groupId>org.swinglabs</groupId>
			<artifactId>swingx</artifactId>
		</dependency>

		<dependency>
			<groupId>com.miglayout</groupId>
			<artifactId>miglayout-swing</artifactId>
		</dependency>

		<dependency>
			<groupId>de.alpharogroup</groupId>
			<artifactId>file-worker</artifactId>
		</dependency>

		<dependency>
			<groupId>de.alpharogroup</groupId>
			<artifactId>jcommons-lang</artifactId>
		</dependency>

		<dependency>
			<groupId>de.alpharogroup</groupId>
			<artifactId>crypt-data</artifactId>
		</dependency>

		<dependency>
			<groupId>de.alpharogroup</groupId>
			<artifactId>crypt-core</artifactId>
		</dependency>

	</dependencies>

	<build>

		<finalName>${full-app-name}</finalName>

		<resources>

			<resource>
				<filtering>false</filtering>
				<directory>src/main/izpack</directory>
			</resource>

			<resource>
				<filtering>false</filtering>
				<directory>src/main/resources</directory>
			</resource>

		</resources>

		<pluginManagement>

			<plugins>

				<plugin>
					<artifactId>maven-antrun-plugin</artifactId>
					<executions>
						<execution>
							<id>default-cli</id>
							<phase>process-resources</phase>
							<goals>
								<goal>run</goal>
							</goals>
							<configuration>

								<tasks>
									<copy todir="${dist-path}">
										<fileset dir="${project.build.directory}" includes="**/*.jar">
											<filename name="${file-name-with-dependencies-path}" />
										</fileset>
									</copy>
								</tasks>

							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<artifactId>maven-dependency-plugin</artifactId>
					<configuration>
						<excludeTransitive>false</excludeTransitive>
						<!-- reference our custom panels jar in our installer descriptor without 
							its version -->
						<stripVersion>true</stripVersion>
						<overWriteReleases>true</overWriteReleases>
						<overWriteSnapshots>true</overWriteSnapshots>
						<overWriteIfNewer>true</overWriteIfNewer>
						<excludeScope>system</excludeScope>
					</configuration>
					<executions>
						<execution>
							<!-- copy *application* jars to izpack staging lib -->
							<id>copy-product-dependencies</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>copy-dependencies</goal>
							</goals>
							<configuration>
								<outputDirectory>${izpack.staging}/lib</outputDirectory>
								<excludeScope>system</excludeScope>
								<!-- this excludes tools.jar, e.g. -->
								<excludeArtifactIds>${project.artifactId}</excludeArtifactIds>
								<!-- IMPORTANT: don't copy custom panels where our application jars 
									live -->
								<excludeGroupIds>org.codehaus.izpack</excludeGroupIds>
								<!-- IMPORTANT: we don't want to copy the IzPack dependency where 
									our application jars live -->
							</configuration>
						</execution>
						<execution>
							<!-- copy izpack custom (custom panels, etc.) jars to izpack staging 
								custom -->
							<id>copy-izpack-dependencies</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>copy-dependencies</goal>
							</goals>
							<configuration>
								<outputDirectory>${izpack.staging}/custom</outputDirectory>
								<includeArtifactIds>${project.artifactId}</includeArtifactIds>
								<!-- IMPORTANT: this causes *only* our custom panels to be copied -->
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.codehaus.izpack</groupId>
					<artifactId>izpack-maven-plugin</artifactId>
					<executions>
						<execution>
							<phase>package</phase>
							<goals>
								<goal>izpack</goal>
							</goals>
							<configuration>
								<!-- base for relative paths in izpack descriptor -->
								<baseDir>${izpack.staging}</baseDir>
								<installFile>${izpack.dir.app}/install.xml</installFile>
							</configuration>
						</execution>
					</executions>
					<dependencies>

						<dependency>
							<groupId>org.codehaus.izpack</groupId>
							<artifactId>izpack-panel</artifactId>
							<version>${izpack.version}</version>
						</dependency>

						<dependency>
							<groupId>${project.groupId}</groupId>
							<artifactId>${project.artifactId}</artifactId>
							<version>${project.version}</version>
						</dependency>

					</dependencies>
				</plugin>

				<plugin>
					<artifactId>maven-jar-plugin</artifactId>
					<configuration>
						<archive>
							<manifest>
								<mainClass>de.alpharogroup.duplicate.files.desktoppane.MainApplication</mainClass>
								<packageName>de.alpharogroup.duplicate.files.desktoppane</packageName>
							</manifest>
							<manifestEntries>
								<mode>development</mode>
								<url>${project.url}</url>
							</manifestEntries>
							<manifestFile>src/main/resources/META-INF/MANIFEST.MF</manifestFile>
						</archive>
					</configuration>
				</plugin>

				<plugin>
					<!-- NOTE: We don't need a groupId specification because the group is 
						org.apache.maven.plugins ...which is assumed by default. -->
					<artifactId>maven-assembly-plugin</artifactId>
					<configuration>
						<descriptorRefs>
							<descriptorRef>jar-with-dependencies</descriptorRef>
						</descriptorRefs>
						<archive>
							<manifest>
								<mainClass>de.alpharogroup.duplicate.files.desktoppane.MainApplication</mainClass>
							</manifest>
						</archive>
					</configuration>
					<executions>
						<execution>
							<id>make-assembly</id>
							<!-- this is used for inheritance merges -->
							<phase>package</phase>
							<!-- append to the packaging phase. -->
							<goals>
								<goal>single</goal>
								<!-- goals == mojos -->
							</goals>
						</execution>
					</executions>
				</plugin>

			</plugins>

		</pluginManagement>

		<plugins>

			<plugin>
				<artifactId>maven-jar-plugin</artifactId>
			</plugin>

			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
			</plugin>

			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.codehaus.izpack</groupId>
				<artifactId>izpack-maven-plugin</artifactId>
			</plugin>

		</plugins>

	</build>

	<profiles>

		<profile>
			<id>prepare-release-resources</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<build>

				<pluginManagement>

					<plugins>

						<plugin>
							<artifactId>maven-jar-plugin</artifactId>
							<configuration>
								<archive>
									<manifest>
										<mainClass>de.alpharogroup.mystic.crypt.MainApplication</mainClass>
										<packageName>de.alpharogroup.mystic.crypt</packageName>
									</manifest>
									<manifestEntries>
										<mode>development</mode>
										<url>${pom.url}</url>
									</manifestEntries>
									<manifestFile>src/main/resources/META-INF/MANIFEST.MF</manifestFile>
								</archive>
							</configuration>
						</plugin>

						<plugin>
							<!-- NOTE: We don't need a groupId specification because the group 
								is org.apache.maven.plugins ...which is assumed by default. -->
							<artifactId>maven-assembly-plugin</artifactId>
							<configuration>
								<descriptorRefs>
									<descriptorRef>jar-with-dependencies</descriptorRef>
								</descriptorRefs>
								<archive>
									<manifest>
										<mainClass>de.alpharogroup.mystic.crypt.MainApplication</mainClass>
									</manifest>
								</archive>
							</configuration>
							<executions>
								<execution>
									<id>make-assembly</id>
									<!-- this is used for inheritance merges -->
									<phase>package</phase>
									<!-- append to the packaging phase. -->
									<goals>
										<goal>single</goal>
										<!-- goals == mojos -->
									</goals>
								</execution>
							</executions>
						</plugin>

					</plugins>

				</pluginManagement>

				<plugins>
				
					<plugin>
						<artifactId>maven-jar-plugin</artifactId>
					</plugin>

					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
					</plugin>

					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
					</plugin>

				</plugins>

			</build>

		</profile>

		<profile>
			<id>release-izpack</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>

				<pluginManagement>

					<plugins>

						<plugin>
							<artifactId>maven-antrun-plugin</artifactId>
							<executions>
								<execution>
									<id>create-staging-area</id>
									<phase>process-resources</phase>
									<goals>
										<goal>run</goal>
									</goals>
									<configuration>
										<tasks>
											<copy todir="${izpack.staging}">
												<fileset dir="${basedir}/src/izpack" />
											</copy>
										</tasks>
									</configuration>
								</execution>
							</executions>
						</plugin>

						<plugin>
							<artifactId>maven-dependency-plugin</artifactId>
							<configuration>
								<excludeTransitive>false</excludeTransitive>
								<!-- reference our custom panels jar in our installer descriptor 
									without its version -->
								<stripVersion>true</stripVersion>
								<overWriteReleases>true</overWriteReleases>
								<overWriteSnapshots>true</overWriteSnapshots>
								<overWriteIfNewer>true</overWriteIfNewer>
								<excludeScope>system</excludeScope>
							</configuration>
							<executions>
								<execution>
									<!-- copy *application* jars to izpack staging lib -->
									<id>copy-product-dependencies</id>
									<phase>prepare-package</phase>
									<goals>
										<goal>copy-dependencies</goal>
									</goals>
									<configuration>
										<outputDirectory>${izpack.staging}/lib</outputDirectory>
										<excludeScope>system</excludeScope>
										<!-- this excludes tools.jar, e.g. -->
										<excludeArtifactIds>${project.artifactId}</excludeArtifactIds>
										<!-- IMPORTANT: don't copy custom panels where our application 
											jars live -->
										<excludeGroupIds>org.codehaus.izpack</excludeGroupIds>
										<!-- IMPORTANT: we don't want to copy the IzPack dependency where 
											our application jars live -->
									</configuration>
								</execution>
								<execution>
									<!-- copy izpack custom (custom panels, etc.) jars to izpack staging 
										custom -->
									<id>copy-izpack-dependencies</id>
									<phase>prepare-package</phase>
									<goals>
										<goal>copy-dependencies</goal>
									</goals>
									<configuration>
										<outputDirectory>${izpack.staging}/custom</outputDirectory>
										<includeArtifactIds>${project.artifactId}</includeArtifactIds>
										<!-- IMPORTANT: this causes *only* our custom panels to be copied -->
									</configuration>
								</execution>
							</executions>
						</plugin>

						<plugin>
							<groupId>org.codehaus.izpack</groupId>
							<artifactId>izpack-maven-plugin</artifactId>
							<executions>
								<execution>
									<phase>package</phase>
									<goals>
										<goal>izpack</goal>
									</goals>
									<configuration>
										<!-- base for relative paths in izpack descriptor -->
										<baseDir>${izpack.staging}</baseDir>
										<installFile>${izpack.dir.app}/install.xml</installFile>
									</configuration>
								</execution>
							</executions>
							<dependencies>

								<dependency>
									<groupId>org.codehaus.izpack</groupId>
									<artifactId>izpack-panel</artifactId>
									<version>${izpack.version}</version>
								</dependency>

								<dependency>
									<groupId>${project.groupId}</groupId>
									<artifactId>${project.artifactId}</artifactId>
									<version>${project.version}</version>
								</dependency>

							</dependencies>
						</plugin>

					</plugins>

				</pluginManagement>

				<plugins>

					<plugin>
						<artifactId>maven-dependency-plugin</artifactId>
					</plugin>

					<plugin>
						<groupId>org.codehaus.izpack</groupId>
						<artifactId>izpack-maven-plugin</artifactId>
					</plugin>

				</plugins>

			</build>

		</profile>
		
		

		<profile>
			<id>prepare-and-release-and-izpack</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<build>

				<pluginManagement>

					<plugins>

						<plugin>
							<artifactId>maven-jar-plugin</artifactId>
							<configuration>
								<archive>
									<manifest>
										<mainClass>de.alpharogroup.mystic.crypt.MainApplication</mainClass>
										<packageName>de.alpharogroup.mystic.crypt</packageName>
									</manifest>
									<manifestEntries>
										<mode>development</mode>
										<url>${pom.url}</url>
									</manifestEntries>
									<manifestFile>src/main/resources/META-INF/MANIFEST.MF</manifestFile>
								</archive>
							</configuration>
						</plugin>

						<plugin>
							<!-- NOTE: We don't need a groupId specification because the group 
								is org.apache.maven.plugins ...which is assumed by default. -->
							<artifactId>maven-assembly-plugin</artifactId>
							<configuration>
								<descriptorRefs>
									<descriptorRef>jar-with-dependencies</descriptorRef>
								</descriptorRefs>
								<archive>
									<manifest>
										<mainClass>de.alpharogroup.mystic.crypt.MainApplication</mainClass>
									</manifest>
								</archive>
							</configuration>
							<executions>
								<execution>
									<id>make-assembly</id>
									<!-- this is used for inheritance merges -->
									<phase>package</phase>
									<!-- append to the packaging phase. -->
									<goals>
										<goal>single</goal>
										<!-- goals == mojos -->
									</goals>
								</execution>
							</executions>
						</plugin>

						<plugin>
							<artifactId>maven-antrun-plugin</artifactId>
							<executions>
								<execution>
									<id>create-staging-area</id>
									<phase>process-resources</phase>
									<goals>
										<goal>run</goal>
									</goals>
									<configuration>
										<tasks>
											<copy todir="${izpack.staging}">
												<fileset dir="${basedir}/src/izpack" />
											</copy>
										</tasks>
									</configuration>
								</execution>
							</executions>
						</plugin>

						<plugin>
							<artifactId>maven-dependency-plugin</artifactId>
							<configuration>
								<excludeTransitive>false</excludeTransitive>
								<!-- reference our custom panels jar in our installer descriptor 
									without its version -->
								<stripVersion>true</stripVersion>
								<overWriteReleases>true</overWriteReleases>
								<overWriteSnapshots>true</overWriteSnapshots>
								<overWriteIfNewer>true</overWriteIfNewer>
								<excludeScope>system</excludeScope>
							</configuration>
							<executions>
								<execution>
									<!-- copy *application* jars to izpack staging lib -->
									<id>copy-product-dependencies</id>
									<phase>prepare-package</phase>
									<goals>
										<goal>copy-dependencies</goal>
									</goals>
									<configuration>
										<outputDirectory>${izpack.staging}/lib</outputDirectory>
										<excludeScope>system</excludeScope>
										<!-- this excludes tools.jar, e.g. -->
										<excludeArtifactIds>${project.artifactId}</excludeArtifactIds>
										<!-- IMPORTANT: don't copy custom panels where our application 
											jars live -->
										<excludeGroupIds>org.codehaus.izpack</excludeGroupIds>
										<!-- IMPORTANT: we don't want to copy the IzPack dependency where 
											our application jars live -->
									</configuration>
								</execution>
								<execution>
									<!-- copy izpack custom (custom panels, etc.) jars to izpack staging 
										custom -->
									<id>copy-izpack-dependencies</id>
									<phase>prepare-package</phase>
									<goals>
										<goal>copy-dependencies</goal>
									</goals>
									<configuration>
										<outputDirectory>${izpack.staging}/custom</outputDirectory>
										<includeArtifactIds>${project.artifactId}</includeArtifactIds>
										<!-- IMPORTANT: this causes *only* our custom panels to be copied -->
									</configuration>
								</execution>
							</executions>
						</plugin>

						<plugin>
							<groupId>org.codehaus.izpack</groupId>
							<artifactId>izpack-maven-plugin</artifactId>
							<executions>
								<execution>
									<phase>package</phase>
									<goals>
										<goal>izpack</goal>
									</goals>
									<configuration>
										<!-- base for relative paths in izpack descriptor -->
										<baseDir>${izpack.staging}</baseDir>
										<installFile>${izpack.dir.app}/install.xml</installFile>
									</configuration>
								</execution>
							</executions>
							<dependencies>

								<dependency>
									<groupId>org.codehaus.izpack</groupId>
									<artifactId>izpack-panel</artifactId>
									<version>${izpack.version}</version>
								</dependency>

								<dependency>
									<groupId>${project.groupId}</groupId>
									<artifactId>${project.artifactId}</artifactId>
									<version>${project.version}</version>
								</dependency>

							</dependencies>
						</plugin>

					</plugins>

				</pluginManagement>

				<plugins>
				
					<plugin>
						<artifactId>maven-jar-plugin</artifactId>
					</plugin>

					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
					</plugin>

					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
					</plugin>

					<plugin>
						<artifactId>maven-dependency-plugin</artifactId>
					</plugin>

					<plugin>
						<groupId>org.codehaus.izpack</groupId>
						<artifactId>izpack-maven-plugin</artifactId>
					</plugin>

				</plugins>

			</build>

		</profile>

	</profiles>

</project>